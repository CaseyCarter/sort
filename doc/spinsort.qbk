[/===========================================================================
 Copyright (c) 2017 Steven Ross, Francisco Tapia, Orson Peters


 Distributed under the Boost Software License, Version 1.0
 See accompanying file LICENSE_1_0.txt or copy at
 http://www.boost.org/LICENSE_1_0.txt
=============================================================================/]


[section:spinsort 2.3.- spinsort]


[*Spinsort] is a new stable sort algorithm, designed and implemented by Francisco Tapia for the Boost Sort Library.

It is a merge algorithms which combines several ideas in order to improve the speed of other stable sort algorithms.

The algorithm have an excellent response when the data are near sorted. Many times the new elements are inserted at end
of the sorted elements, or some elements are modified, breaking the order of the elements. In these cases, spinsort
provide a very fast response.

[table AlgorithmDescription
[[Algorithm]            [Stable][Additional Memory]         [Best, average, and worst case]]
[[spinsort]             [Yes]   [N / 2]                     [N, NlogN , NlogN]]
]

The benchmark with 100000000 64 bits integers, running on a Intel i7-5820K CPU @ 3.30GH shows the mentioned characteristics.

[table benchmark
[[Data]             [std::stable_sort] [spin_sort] ]
[[random]                    [ 8.62 ] [ 9.73 ] ]
[[sorted]                    [ 4.88 ] [ 0.06 ] ]
[[sorted + 0.1% end]         [ 4.92 ] [ 0.41 ] ]
[[sorted +   1% end]         [ 4.97 ] [ 0.55 ] ]
[[sorted +  10% end]         [ 5.73 ] [ 1.32 ] ]
[[sorted + 0.1% mid]         [ 6.58 ] [ 1.89 ] ]
[[sorted +   1% mid]         [ 7.06 ] [ 2.12 ] ]
[[sorted +  10% mid]         [ 9.56 ] [ 4.02 ] ]
[[reverse sorted]            [ 0.13 ] [ 0.14 ] ]
[[reverse sorted + 0.1% end] [ 5.22 ] [ 0.52 ] ]
[[reverse sorted +   1% end] [ 5.29 ] [ 0.66 ] ]
[[reverse sorted +  10% end] [ 6.03 ] [ 1.45 ] ]
[[reverse sorted + 0.1% mid] [ 6.52 ] [ 1.89 ] ]
[[reverse sorted +   1% mid] [ 7.09 ] [ 2.12 ] ]
[[reverse sorted +  10% mid] [ 9.46 ] [ 4.02 ] ]
]

You only need to include the file boost/sort/parallel/sort.hpp

``
    #include <boost/sort/sort.hpp>


    template <class iter_t,  typename compare>
    void spinsort (iter_t first, iter_t last, compare comp = compare());
``

The spinsort function is in the namespace boost::sort

The algorithms use a [*comparison object], in the same way as the standard library sort
algorithms. If you don't define it, the comparison object defaults to std::less, which uses
the < operator internally for comparisons.

The algorithms are [*exception safe],  meaning that, the exceptions generated by the algorithms
guarantee the integrity of the objects to sort, but not their relative order. If the exception
is generated inside the objects (in the move or in the copy constructor.. ) the results can be
unpredictable.

[endsect]


